package generator

import (
	"bytes"
	"go/format"
	"os"
	"path/filepath"

	"github.com/kasaikou/goacc/goacc/entity"
	"github.com/kasaikou/goacc/goacc/parser"
	"golang.org/x/tools/imports"
)

func NewGenerator() *Generator {
	return &Generator{
		cache: make(map[string]*entity.FileConfig),
	}
}

type Generator struct {
	cache map[string]*entity.FileConfig
}

func (g *Generator) Generate(srcFilename string) (destFilename string, b []byte) {

	srcFilename, err := filepath.Abs(srcFilename)
	if err != nil {
		panic(err)
	}

	config, exist := g.cache[srcFilename]
	if !exist {
		g.loadFile(srcFilename)
		config = g.cache[srcFilename]
	}

	buffer := bytes.NewBufferString("")
	fprintfln(buffer, "// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.")
	fprintfln(buffer, "package %s", config.PackageName())
	fprintfln(buffer, "")

	for _, structConfig := range config.Structs() {
		generateNew(buffer, structConfig)
		generateAccessor(buffer, structConfig)
		generateMarshalJSON(buffer, structConfig)
	}
	destFilename = renameDestFilename(srcFilename)

	b, err = format.Source(buffer.Bytes())
	if err != nil {
		// debug code
		if writeErr := WriteFile(destFilename, buffer.Bytes()); writeErr != nil {
			panic(err.Error() + ", and " + writeErr.Error())
		}
		panic(err.Error())
	}

	b, err = imports.Process(destFilename, b, nil)
	if err != nil {
		panic(err.Error())
	}

	if err := WriteFile(destFilename, b); err != nil {
		panic(err.Error())
	}

	return destFilename, b
}

func (g *Generator) loadFile(srcFilename string) {
	dirname := filepath.Dir(srcFilename)
	pkg, err := parser.LoadPackage(dirname)
	if err != nil {
		panic(err.Error())
	}

	fileConfigs := parser.ParsePackage(pkg)

	for _, file := range fileConfigs {
		g.cache[file.Filename()] = &file
	}

	if _, exist := g.cache[srcFilename]; !exist {
		panic("cannot cache: " + srcFilename)
	}
}

func WriteFile(destFilename string, buffer []byte) error {
	file, err := os.Create(destFilename)
	if err != nil {
		return err
	}
	defer file.Close()

	if _, err := file.Write(buffer); err != nil {
		return err
	}

	return nil
}
