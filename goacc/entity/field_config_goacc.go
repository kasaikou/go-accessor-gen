// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.
// defaultTag=-
package entity

type FieldConfigBuilder interface {
	Build() *FieldConfig
}

// fieldConfigBuilderImpl is an instance for generating an instance of FieldConfig.
type fieldConfigBuilderImpl struct {
	__fc *FieldConfig
}

// NewFieldConfigBuilder creates an FieldConfigBuilder instance.
func NewFieldConfigBuilder(
	name string,
	typeName string,
	jsonTag string,
	features *FieldConfigFeatures,
) FieldConfigBuilder {
	__fc := &FieldConfig{}

	__fc.name = name
	__fc.typeName = typeName
	__fc.jsonTag = jsonTag
	__fc.features = features

	return &fieldConfigBuilderImpl{__fc: __fc}
}

// Build purges FieldConfig instance from fieldConfigBuilderImpl.
//
// If calls other method in fieldConfigBuilderImpl after Purge called, it will be panic.
func (__fcb *fieldConfigBuilderImpl) Build() *FieldConfig {
	if __fcb == nil {
		panic("fieldConfigBuilderImpl is nil")
	} else if __fcb.__fc != nil {
		__fc := __fcb.__fc
		__fcb.__fc = nil

		return __fc
	}

	panic("FieldConfig has been already purged")
}

func (__fc *FieldConfig) Name() string {
	if __fc != nil {
		return __fc.name
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) DocText() string {
	if __fc != nil {
		return __fc.docText
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) TypeName() string {
	if __fc != nil {
		return __fc.typeName
	}

	panic("FieldConfig is nil")
}

// If empty, it means no json tag.
func (__fc *FieldConfig) JsonTag() string {
	if __fc != nil {
		return __fc.jsonTag
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) Features() *FieldConfigFeatures {
	if __fc != nil {
		return __fc.features
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) SetDocText(docText string) {
	if __fc != nil {
		__fc.docText = docText
	}
}

func (__fc *FieldConfig) SetTypeName(typeName string) {
	if __fc != nil {
		__fc.typeName = typeName
	}
}

func (__fc *FieldConfig) SetFeatures(features *FieldConfigFeatures) {
	if __fc != nil {
		__fc.features = features
	}
}
