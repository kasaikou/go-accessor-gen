// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.
package entity

// FileConfigBuilder is an instance for generating an instance of FileConfig.
type FileConfigBuilder struct {
	__fc *FileConfig
}

// NewFileConfigBuilder creates an FileConfigBuilder instance.
func NewFileConfigBuilder(
	filename string,
	packageName string,
	imports []ImportConfig,
	structs []StructConfig,
) *FileConfigBuilder {
	__fc := &FileConfig{}

	__fc.filename = filename
	__fc.packageName = packageName
	__fc.imports = imports
	__fc.structs = structs

	return &FileConfigBuilder{__fc: __fc}
}

// Purge purges FileConfig instance from FileConfigBuilder.
//
// If calls other method in FileConfigBuilder after Purge called, it will be panic.
func (__fcb *FileConfigBuilder) Purge() *FileConfig {
	if __fcb == nil {
		panic("FileConfigBuilder is nil")
	} else if __fcb.__fc != nil {
		__fc := __fcb.__fc
		__fcb.__fc = nil

		return __fc
	}

	panic("FileConfig has been already purged")
}

// Absolute path of Go file.
func (__fc *FileConfig) Filename() string {
	if __fc != nil {
		return __fc.filename
	}

	panic("FileConfig is nil")
}

// Package name.
func (__fc *FileConfig) PackageName() string {
	if __fc != nil {
		return __fc.packageName
	}

	panic("FileConfig is nil")
}

// Configuration of file defining Structs.
func (__fc *FileConfig) Structs() []StructConfig {
	if __fc != nil {
		return __fc.structs
	}

	panic("FileConfig is nil")
}

// ImportConfigBuilder is an instance for generating an instance of ImportConfig.
type ImportConfigBuilder struct {
	__ic *ImportConfig
}

// NewImportConfigBuilder creates an ImportConfigBuilder instance.
func NewImportConfigBuilder(
	name string,
	path string,
) *ImportConfigBuilder {
	__ic := &ImportConfig{}

	__ic.name = name
	__ic.path = path

	return &ImportConfigBuilder{__ic: __ic}
}

// Purge purges ImportConfig instance from ImportConfigBuilder.
//
// If calls other method in ImportConfigBuilder after Purge called, it will be panic.
func (__icb *ImportConfigBuilder) Purge() *ImportConfig {
	if __icb == nil {
		panic("ImportConfigBuilder is nil")
	} else if __icb.__ic != nil {
		__ic := __icb.__ic
		__icb.__ic = nil

		return __ic
	}

	panic("ImportConfig has been already purged")
}

// StructConfigBuilder is an instance for generating an instance of StructConfig.
type StructConfigBuilder struct {
	__sc *StructConfig
}

// NewStructConfigBuilder creates an StructConfigBuilder instance.
func NewStructConfigBuilder(
	name string,
	structSupports StructSupports,
	mutexFieldName string,
	fields []FieldConfig,
) *StructConfigBuilder {
	__sc := &StructConfig{}

	__sc.name = name
	__sc.structSupports = structSupports
	__sc.mutexFieldName = mutexFieldName
	__sc.fields = fields

	return &StructConfigBuilder{__sc: __sc}
}

func (__scb *StructConfigBuilder) WithDocText(docText string) *StructConfigBuilder {
	if __scb == nil {
		panic("StructConfigBuilder is nil")
	} else if __scb.__sc != nil {
		__scb.__sc.docText = docText
		return __scb
	}

	panic("StructConfig has been already purged")
}

func (__scb *StructConfigBuilder) WithDefineFilename(defineFilename string) *StructConfigBuilder {
	if __scb == nil {
		panic("StructConfigBuilder is nil")
	} else if __scb.__sc != nil {
		__scb.__sc.defineFilename = defineFilename
		return __scb
	}

	panic("StructConfig has been already purged")
}

func (__scb *StructConfigBuilder) WithEnableMarshalJson(enableMarshalJSON bool) *StructConfigBuilder {
	if __scb == nil {
		panic("StructConfigBuilder is nil")
	} else if __scb.__sc != nil {
		__scb.__sc.enableMarshalJSON = enableMarshalJSON
		return __scb
	}

	panic("StructConfig has been already purged")
}

// Purge purges StructConfig instance from StructConfigBuilder.
//
// If calls other method in StructConfigBuilder after Purge called, it will be panic.
func (__scb *StructConfigBuilder) Purge() *StructConfig {
	if __scb == nil {
		panic("StructConfigBuilder is nil")
	} else if __scb.__sc != nil {
		__sc := __scb.__sc
		__scb.__sc = nil

		return __sc
	}

	panic("StructConfig has been already purged")
}

func (__sc *StructConfig) Name() string {
	if __sc != nil {
		return __sc.name
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) DocText() string {
	if __sc != nil {
		return __sc.docText
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) DefineFilename() string {
	if __sc != nil {
		return __sc.defineFilename
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) MutexFieldName() string {
	if __sc != nil {
		return __sc.mutexFieldName
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) EnableMarshalJson() bool {
	if __sc != nil {
		return __sc.enableMarshalJSON
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) Fields() []FieldConfig {
	if __sc != nil {
		return __sc.fields
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) StructSupportsPtr() *StructSupports {
	if __sc != nil {
		return &__sc.structSupports
	}

	panic("StructConfig is nil")
}

func (__sc *StructConfig) SetDocText(docText string) {
	if __sc != nil {
		__sc.docText = docText
	}
}

func (__sc *StructConfig) SetDefineFilename(defineFilename string) {
	if __sc != nil {
		__sc.defineFilename = defineFilename
	}
}

// StructSupportsBuilder is an instance for generating an instance of StructSupports.
type StructSupportsBuilder struct {
	__ss *StructSupports
}

// NewStructSupportsBuilder creates an StructSupportsBuilder instance.
func NewStructSupportsBuilder() *StructSupportsBuilder {
	__ss := &StructSupports{}

	return &StructSupportsBuilder{__ss: __ss}
}

func (__ssb *StructSupportsBuilder) WithHasPreNewHook(hasPreNewHook bool) *StructSupportsBuilder {
	if __ssb == nil {
		panic("StructSupportsBuilder is nil")
	} else if __ssb.__ss != nil {
		__ssb.__ss.hasPreNewHook = hasPreNewHook
		return __ssb
	}

	panic("StructSupports has been already purged")
}

func (__ssb *StructSupportsBuilder) WithHasPostNewHook(hasPostNewHook bool) *StructSupportsBuilder {
	if __ssb == nil {
		panic("StructSupportsBuilder is nil")
	} else if __ssb.__ss != nil {
		__ssb.__ss.hasPostNewHook = hasPostNewHook
		return __ssb
	}

	panic("StructSupports has been already purged")
}

// Purge purges StructSupports instance from StructSupportsBuilder.
//
// If calls other method in StructSupportsBuilder after Purge called, it will be panic.
func (__ssb *StructSupportsBuilder) Purge() *StructSupports {
	if __ssb == nil {
		panic("StructSupportsBuilder is nil")
	} else if __ssb.__ss != nil {
		__ss := __ssb.__ss
		__ssb.__ss = nil

		return __ss
	}

	panic("StructSupports has been already purged")
}

func (__ss *StructSupports) HasPreNewHook() bool {
	if __ss != nil {
		return __ss.hasPreNewHook
	}

	panic("StructSupports is nil")
}

func (__ss *StructSupports) HasPostNewHook() bool {
	if __ss != nil {
		return __ss.hasPostNewHook
	}

	panic("StructSupports is nil")
}

// FieldConfigBuilder is an instance for generating an instance of FieldConfig.
type FieldConfigBuilder struct {
	__fc *FieldConfig
}

// NewFieldConfigBuilder creates an FieldConfigBuilder instance.
func NewFieldConfigBuilder(
	name string,
	typeName string,
	jsonTag string,
	features *FieldConfigFeatures,
) *FieldConfigBuilder {
	__fc := &FieldConfig{}

	__fc.name = name
	__fc.typeName = typeName
	__fc.jsonTag = jsonTag
	__fc.features = features

	return &FieldConfigBuilder{__fc: __fc}
}

// Purge purges FieldConfig instance from FieldConfigBuilder.
//
// If calls other method in FieldConfigBuilder after Purge called, it will be panic.
func (__fcb *FieldConfigBuilder) Purge() *FieldConfig {
	if __fcb == nil {
		panic("FieldConfigBuilder is nil")
	} else if __fcb.__fc != nil {
		__fc := __fcb.__fc
		__fcb.__fc = nil

		return __fc
	}

	panic("FieldConfig has been already purged")
}

func (__fc *FieldConfig) Name() string {
	if __fc != nil {
		return __fc.name
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) DocText() string {
	if __fc != nil {
		return __fc.docText
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) TypeName() string {
	if __fc != nil {
		return __fc.typeName
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) JsonTag() string {
	if __fc != nil {
		return __fc.jsonTag
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) Features() *FieldConfigFeatures {
	if __fc != nil {
		return __fc.features
	}

	panic("FieldConfig is nil")
}

func (__fc *FieldConfig) SetDocText(docText string) {
	if __fc != nil {
		__fc.docText = docText
	}
}

func (__fc *FieldConfig) SetTypeName(typeName string) {
	if __fc != nil {
		__fc.typeName = typeName
	}
}

func (__fc *FieldConfig) SetFeatures(features *FieldConfigFeatures) {
	if __fc != nil {
		__fc.features = features
	}
}

// FieldConfigFeaturesBuilder is an instance for generating an instance of FieldConfigFeatures.
type FieldConfigFeaturesBuilder struct {
	__fcf *FieldConfigFeatures
}

// NewFieldConfigFeaturesBuilder creates an FieldConfigFeaturesBuilder instance.
func NewFieldConfigFeaturesBuilder(
	usesMutex bool,
	hasRequired bool,
	hasOptional bool,
	hasPtrGetter bool,
	hasGetter bool,
	hasSetter bool,
) *FieldConfigFeaturesBuilder {
	__fcf := &FieldConfigFeatures{}

	__fcf.usesMutex = usesMutex
	__fcf.hasRequired = hasRequired
	__fcf.hasOptional = hasOptional
	__fcf.hasPtrGetter = hasPtrGetter
	__fcf.hasGetter = hasGetter
	__fcf.hasSetter = hasSetter

	return &FieldConfigFeaturesBuilder{__fcf: __fcf}
}

// Purge purges FieldConfigFeatures instance from FieldConfigFeaturesBuilder.
//
// If calls other method in FieldConfigFeaturesBuilder after Purge called, it will be panic.
func (__fcfb *FieldConfigFeaturesBuilder) Purge() *FieldConfigFeatures {
	if __fcfb == nil {
		panic("FieldConfigFeaturesBuilder is nil")
	} else if __fcfb.__fcf != nil {
		__fcf := __fcfb.__fcf
		__fcfb.__fcf = nil

		return __fcf
	}

	panic("FieldConfigFeatures has been already purged")
}

func (__fcf *FieldConfigFeatures) UsesMutex() bool {
	if __fcf != nil {
		return __fcf.usesMutex
	}

	panic("FieldConfigFeatures is nil")
}

func (__fcf *FieldConfigFeatures) HasRequired() bool {
	if __fcf != nil {
		return __fcf.hasRequired
	}

	panic("FieldConfigFeatures is nil")
}

func (__fcf *FieldConfigFeatures) HasOptional() bool {
	if __fcf != nil {
		return __fcf.hasOptional
	}

	panic("FieldConfigFeatures is nil")
}

func (__fcf *FieldConfigFeatures) HasPtrGetter() bool {
	if __fcf != nil {
		return __fcf.hasPtrGetter
	}

	panic("FieldConfigFeatures is nil")
}

func (__fcf *FieldConfigFeatures) HasGetter() bool {
	if __fcf != nil {
		return __fcf.hasGetter
	}

	panic("FieldConfigFeatures is nil")
}

func (__fcf *FieldConfigFeatures) HasSetter() bool {
	if __fcf != nil {
		return __fcf.hasSetter
	}

	panic("FieldConfigFeatures is nil")
}
