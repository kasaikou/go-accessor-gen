// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.
// defaultTag=required,get,json
package tests

import (
	"encoding/json"

	"github.com/google/uuid"
)

// AnimalBuilder is an instance for generating an instance of Animal.
type AnimalBuilder struct {
	__a *Animal
}

// NewAnimalBuilder creates an AnimalBuilder instance.
func NewAnimalBuilder(
	id uuid.UUID,
	name string,
	kind string,
) *AnimalBuilder {
	__a := &Animal{}

	__a.goaccPreNewHook() // This function calls your defined hook.

	__a.id = id
	__a.name = name
	__a.kind = kind

	return &AnimalBuilder{__a: __a}
}

// Purge purges Animal instance from AnimalBuilder.
//
// If calls other method in AnimalBuilder after Purge called, it will be panic.
func (__ab *AnimalBuilder) Purge() *Animal {
	if __ab == nil {
		panic("AnimalBuilder is nil")
	} else if __ab.__a != nil {
		__a := __ab.__a
		__ab.__a = nil

		__a.goaccPostNewHook() // This function calls your defined hook.

		return __a
	}

	panic("Animal has been already purged")
}

func (__a *Animal) Id() uuid.UUID {
	if __a != nil {
		return __a.id
	}

	panic("Animal is nil")
}

func (__a *Animal) Name() string {
	if __a != nil {
		return __a.name
	}

	panic("Animal is nil")
}

func (__a *Animal) Kind() string {
	if __a != nil {
		return __a.kind
	}

	panic("Animal is nil")
}

func (__a *Animal) MarshalJSON() ([]byte, error) {

	type AnimalJSONContent struct {
		Id   uuid.UUID `json:"id"`
		Name string    `json:"name"`
		Kind string    `json:"kind"`
	}

	return json.Marshal(AnimalJSONContent{
		Id:   __a.id,
		Name: __a.name,
		Kind: __a.kind,
	})
}
