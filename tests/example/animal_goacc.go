// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.
package tests

import "github.com/google/uuid"

// AnimalBuilder is an instance for generating an instance of Animal.
type AnimalBuilder struct {
	__a *Animal
}

// NewAnimalBuilder creates an AnimalBuilder instance.
func NewAnimalBuilder(
	id uuid.UUID,
	name string,
	kind string,
) *AnimalBuilder {
	__a := &Animal{}

	__a.goaccPreNewHook() // This function calls your defined hook.

	__a.id = id
	__a.name = name
	__a.kind = kind

	return &AnimalBuilder{__a: __a}
}

// WithName of animal
func (__ab *AnimalBuilder) WithName(name string) *AnimalBuilder {
	if __ab == nil {
		panic("AnimalBuilder is nil")
	} else if __ab.__a != nil {
		__ab.__a.name = name
		return __ab
	}

	panic("Animal has been already purged")
}

// WithKind of animal
func (__ab *AnimalBuilder) WithKind(kind string) *AnimalBuilder {
	if __ab == nil {
		panic("AnimalBuilder is nil")
	} else if __ab.__a != nil {
		__ab.__a.kind = kind
		return __ab
	}

	panic("Animal has been already purged")
}

// Purge purges Animal instance from AnimalBuilder.
//
// If calls other method in AnimalBuilder after Purge called, it will be panic.
func (__ab *AnimalBuilder) Purge() *Animal {
	if __ab == nil {
		panic("AnimalBuilder is nil")
	} else if __ab.__a != nil {
		__a := __ab.__a
		__ab.__a = nil

		__a.goaccPostNewHook() // This function calls your defined hook.

		return __a
	}

	panic("Animal has been already purged")
}

func (__a *Animal) Id() uuid.UUID {
	if __a != nil {
		return __a.id
	}

	panic("Animal is nil")
}

// Name of animal
func (__a *Animal) Name() string {
	if __a != nil {
		return __a.name
	}

	panic("Animal is nil")
}

// Kind of animal
func (__a *Animal) Kind() string {
	if __a != nil {
		return __a.kind
	}

	panic("Animal is nil")
}
