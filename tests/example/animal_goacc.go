// Code generated by github.com/kasaikou/goacc, DO NOT EDIT.
// defaultTag=-
package tests

import "github.com/google/uuid"

type AnimalBuilder interface {
	SetName(name string) AnimalBuilder
	SetKind(kind string) AnimalBuilder
	Build() *Animal
}

// animalBuilderImpl is an instance for generating an instance of Animal.
type animalBuilderImpl struct {
	__a *Animal
}

// NewAnimalBuilder creates an AnimalBuilder instance.
func NewAnimalBuilder(
	id uuid.UUID,
	name string,
	kind string,
) AnimalBuilder {
	__a := &Animal{}

	__a.goaccPreNewHook() // This function calls your defined hook.

	__a.id = id
	__a.name = name
	__a.kind = kind

	return &animalBuilderImpl{__a: __a}
}

// SetName of animal
func (__ab *animalBuilderImpl) SetName(name string) AnimalBuilder {
	if __ab == nil {
		panic("animalBuilderImpl is nil")
	} else if __ab.__a != nil {
		__ab.__a.name = name
		return __ab
	}

	panic("Animal has been already purged")
}

// SetKind of animal
func (__ab *animalBuilderImpl) SetKind(kind string) AnimalBuilder {
	if __ab == nil {
		panic("animalBuilderImpl is nil")
	} else if __ab.__a != nil {
		__ab.__a.kind = kind
		return __ab
	}

	panic("Animal has been already purged")
}

// Build purges Animal instance from animalBuilderImpl.
//
// If calls other method in animalBuilderImpl after Purge called, it will be panic.
func (__ab *animalBuilderImpl) Build() *Animal {
	if __ab == nil {
		panic("animalBuilderImpl is nil")
	} else if __ab.__a != nil {
		__a := __ab.__a
		__ab.__a = nil

		__a.goaccPostNewHook() // This function calls your defined hook.

		return __a
	}

	panic("Animal has been already purged")
}

func (__a *Animal) Id() uuid.UUID {
	if __a != nil {
		return __a.id
	}

	panic("Animal is nil")
}

// Name of animal
func (__a *Animal) Name() string {
	if __a != nil {
		return __a.name
	}

	panic("Animal is nil")
}

// Kind of animal
func (__a *Animal) Kind() string {
	if __a != nil {
		return __a.kind
	}

	panic("Animal is nil")
}
